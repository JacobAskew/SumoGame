//---------------------------------------------------------------------------

#ifndef BanzukeH
#define BanzukeH
//---------------------------------------------------------------------------
#include <System.Classes.hpp>
#include <FMX.Controls.hpp>
#include <FMX.Forms.hpp>
#include <FMX.Controls.Presentation.hpp>
#include <FMX.Grid.hpp>
#include <FMX.Grid.Style.hpp>
#include <FMX.ScrollBox.hpp>
#include <FMX.StdCtrls.hpp>
#include <FMX.Types.hpp>
#include <System.Rtti.hpp>
#include <FMX.Memo.hpp>
#include <FMX.Memo.Types.hpp>
#include <FMX.Edit.hpp>
#include <FMX.Objects.hpp>
#include <vector>

//---------------------------------------------------------------------------
void EndBanzuke();
class Player;
//bool IsBanzukeComplete;
//---------------------------------------------------------------------------
class TBanzukeForm : public TForm
{
__published:	// IDE-managed Components
	TButton *ButtonReturnStreet;
	TImage *ImageBackGround;
	TButton *ButtonBanzuke;
	TButton *ButtonNewspaper;
	void __fastcall ButtonReturnStreetClick(TObject *Sender);
	void __fastcall ButtonDohyoClick(TObject *Sender);
	void __fastcall ButtonAutomateAllClick(TObject *Sender);
//	void __fastcall BanzukeGridDrawCell(TObject *Sender, TCanvas * const Canvas,
//		TGridDrawStates State, int Col, int Row, const TRectF &Bounds);
	void __fastcall StringGridTournamentDrawColumnCell(TObject *Sender, TCanvas * const Canvas,
          TColumn * const Column, const TRectF &Bounds, const int Row,
          const TValue &Value, const TGridDrawStates State);
	void __fastcall ButtonNextBoutClick(TObject *Sender);
	void __fastcall ButtonNextHumanBoutClick(TObject *Sender);
	void __fastcall ButtonBanzukeClick(TObject *Sender);
	void __fastcall ButtonNewspaperClick(TObject *Sender);
private:	// User declarations
public:		// User declarations
	__fastcall TBanzukeForm(TComponent* Owner);
    void StartBanzuke();
};
//---------------------------------------------------------------------------
extern PACKAGE TBanzukeForm *BanzukeForm;
extern void GetBoutTactic();
extern bool isBanzukeComplete;
extern void TintNoTransparent(TBitmap* bitmap, TAlphaColor tintColor);
extern struct Rikishi* globalFighter1;
extern struct Rikishi* globalFighter2;
extern String VSpath;
extern std::string boutTactic;
extern int winner;
extern std::string fighter1Tactic;
extern int fighter1SkillValue;
extern std::string fighter2Tactic;
extern int fighter2SkillValue;
extern void RandomSkillForFighter(Rikishi& fighter, std::string& fighterTactic);
extern void PopulateLeaderboardGrid();
extern void AssignFightersFromGrid();
extern void FighterSkillValue(Rikishi& fighter, int& fighterSkillValue);
extern void HandleInjury(Rikishi& fighter, int& fighterTotal);
extern int fighter1Total;
extern int fighter2Total;
extern int currentBoutIndex;
extern int winnerIdx;
extern int loserIdx;
extern void Victory(int winner, std::vector<Player>& players);
extern void SetBoutResult(int boutIndex, int winnerIdx, int loserIdx);
extern void UpdateTournamentGrid();
//extern void UpdateBoutGUI(Rikishi* fighter1, Rikishi* fighter2, TForm *form);
extern void EndBanzuke();
//---------------------------------------------------------------------------
#endif

