//---------------------------------------------------------------------------
#include <fmx.h>
//---------------------------------------------------------------------------
#include "Ryogoku.h"
#include "Street.h"
//---------------------------------------------------------------------------
#pragma hdrstop
#pragma package(smart_init)
#pragma resource "*.fmx"
//---------------------------------------------------------------------------
TRyogokuForm *RyogokuForm;
//---------------------------------------------------------------------------
#include <algorithm>  // For std::sort

void PopulateRetiredRikishiGrid(TStringGrid* Grid, std::vector<Rikishi>& retiredRikishi) {
    // Step 1: Calculate scores
    for (auto& rikishi : retiredRikishi) {
        rikishi.totalScore = rikishi.finalRank + rikishi.age + rikishi.technique +
                             rikishi.speed + rikishi.strength + rikishi.endurance +
                             rikishi.spirit + (7 - rikishi.minBid) + (rikishi.tournamentWins * 5);
    }

    // Step 2: Sort rikishi by totalScore (Descending Order)
    std::sort(retiredRikishi.begin(), retiredRikishi.end(),
              [](const Rikishi& a, const Rikishi& b) {
                  return a.totalScore > b.totalScore;  // Higher score comes first
              });

    // Step 3: Update Grid
    Grid->RowCount = retiredRikishi.size();  // Ensure correct row count

    // Get column indices dynamically
    int nameCol = Grid->ColumnByTitle("Name")->Index;
    int ageCol = Grid->ColumnByTitle("Age*")->Index;
    int rankCol = Grid->ColumnByTitle("Position")->Index;
    int oyakataCol = Grid->ColumnByTitle("Oyakata")->Index;
    int spiritCol = Grid->ColumnByTitle("Spirit")->Index;
    int finalRankCol = Grid->ColumnByTitle("Final Rank")->Index;
    int scoreCol = Grid->ColumnByTitle("Score")->Index;
    int weightCol = Grid->ColumnByTitle("Weight")->Index;
    int enduranceCol = Grid->ColumnByTitle("Endurance")->Index;
    int techniqueCol = Grid->ColumnByTitle("Technique")->Index;
    int speedCol = Grid->ColumnByTitle("Speed")->Index;
    int strengthCol = Grid->ColumnByTitle("Strength")->Index;
    int minBidCol = Grid->ColumnByTitle("Min Bid")->Index;

    // Fill the grid with sorted Rikishi
    for (size_t i = 0; i < retiredRikishi.size(); ++i) {
        const Rikishi& rikishi = retiredRikishi[i];

        Grid->Cells[nameCol][i] = rikishi.name.c_str();
        Grid->Cells[ageCol][i] = IntToStr(rikishi.age);
        Grid->Cells[rankCol][i] = rikishi.rank.c_str();
        Grid->Cells[oyakataCol][i] = rikishi.oyakata.c_str();
        Grid->Cells[spiritCol][i] = IntToStr(rikishi.spirit);
        Grid->Cells[finalRankCol][i] = IntToStr(rikishi.rank);
        Grid->Cells[scoreCol][i] = IntToStr(rikishi.totalScore);

        // Show weight limits as "current/max"
        Grid->Cells[weightCol][i] = IntToStr(rikishi.weight) + "/" + IntToStr(rikishi.weightLimit);
        Grid->Cells[enduranceCol][i] = IntToStr(rikishi.endurance) + "/" + IntToStr(rikishi.enduranceLimit);
        Grid->Cells[techniqueCol][i] = IntToStr(rikishi.technique) + "/" + IntToStr(rikishi.techniqueLimit);
        Grid->Cells[speedCol][i] = IntToStr(rikishi.speed) + "/" + IntToStr(rikishi.speedLimit);
        Grid->Cells[strengthCol][i] = IntToStr(rikishi.strength) + "/" + IntToStr(rikishi.strengthLimit);
        Grid->Cells[minBidCol][i] = IntToStr(rikishi.minBid);
    }
}

//---------------------------------------------------------------------------
__fastcall TRyogokuForm::TRyogokuForm(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TRyogokuForm::ButtonReturnStreetClick(TObject *Sender)
{
	MainStreet->Show(); // Show the main form
	this->Hide();     // Hide the second form
}
//---------------------------------------------------------------------------
