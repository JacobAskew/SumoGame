//---------------------------------------------------------------------------
#include <algorithm> // For std::random_shuffle (in older C++ compilers)
#include <stdexcept>
#include <fmx.h>
#include <iostream>
#include <filesystem>  // Required for filesystem checks
#include <windows.h>
#include <fstream>
#include <random>
#include <vector>
#include <string>
#include <cstdlib> // For rand() and srand()
#include <ctime>   // For time()
#include <set> // For std::set
#include <cmath> // For std::floor

#include "Unit2.h"
#pragma hdrstop
#pragma package(smart_init)
#pragma resource "*.fmx"

TForm2 *Form2;
//---------------------------------------------------------------------------
// Declare the variables
int strength_1, weight_1, technique_1, endurance_1, speed_1, MinBid1, CurrentBid1;
int strengthlimit1, weightlimit1, techniquelimit1, endurancelimit1, speedlimit1;
int strength_2, weight_2, technique_2, endurance_2, speed_2, MinBid2, CurrentBid2;
int	player1Skill, Luck1, Spirit1, Age1;
int player2Skill, Luck2, Spirit2, Age2;
int SkillDiceNo = 5;
int ColourDiceNo = 6;
int DiceNo = 7;
String player1Tactic, Rank1;
String player2Tactic, Rank2;
String boutTactic;
String player1Owner = "Player";   // Put YOUR name here!
String player2Owner = "Computer";
//void GetRandomName(std::string &playerName, std::vector<std::string> &usedNames);
//void __fastcall TForm2::UpdateLogMemo(const String& message)
std::vector<std::string> usedNames; // Initialize the vector before use
std::string player1Name, player2Name;

std::string Ranks[] = {
	"Yokozuna",
	"Ozeki",
	"Sekiwake",
	"Komusubi",
	"Maegashira 1",
	"Maegashira 2",
	"Maegashira 3",
	"Maegashira 4",
	"Maegashira 5",
	"Maegashira 6",
	"Maegashira 7",
	"Maegashira 8",
	"Maegashira 9",
	"Maegashira 10",
	"Juryo 1",
	"Juryo 2"
};

//--------------------------- TOOLS FOR DEBUGGING //----------------------------
//

//bool CheckFileExists(const std::string& filename) {
//	return std::filesystem::exists(filename); // Returns true if the file exists
//}
//
//void __fastcall TForm2::CheckNamesFile() {
//	std::string namesPath = "C:\\Users\\zx123\\OneDrive\\Documents\\Embarcadero\\Studio\\Projects\\names.txt";
//
//	if (!std::filesystem::exists(namesPath)) {
//		MessageBox(NULL, L"names.txt file is missing or not in the correct directory!", L"Error", MB_OK | MB_ICONERROR);
//		throw std::runtime_error("names.txt file is missing or not in the correct directory.");
//	} else {
//		std::cout << "names.txt file exists." << std::endl; // Output to console
//	}
//}
//void CreateConsole() {
//	// Allocates a new console for the program
//    AllocConsole();
//
//	// Redirects the console output to the standard output
//    freopen("CONOUT$", "w", stdout);
//    freopen("CONIN$", "r", stdin);
//
//	std::cout << "Console opened successfully" << std::endl;
//}

//
//---------------------------------------------------------------------------
void GetRandomName(std::string &playerName, std::vector<std::string> &usedNames) {
	std::string namesPath = "C:\\Users\\zx123\\OneDrive\\Documents\\Embarcadero\\Studio\\Projects\\names.txt";
	std::ifstream file(namesPath);
	if (!file.is_open()) {
		throw std::runtime_error("Failed to open names.txt");
	}

	std::vector<std::string> allNames;
	std::string name;
    while (std::getline(file, name)) {
        allNames.push_back(name);
    }
    file.close();

    if (allNames.empty()) {
        throw std::runtime_error("No names found in names.txt");
    }

    // Seed the random number generator (if not already seeded)
    static bool seeded = false;
    if (!seeded) {
        std::srand(static_cast<unsigned>(std::time(0)));
        seeded = true;
    }

	// Custom shuffle using std::rand
	for (size_t i = 0; i < allNames.size(); ++i) {
		size_t j = i + std::rand() % (allNames.size() - i);
		std::swap(allNames[i], allNames[j]);
    }

	for (const auto &potentialName : allNames) {
		// Check if the name has already been used
		if (std::find(usedNames.begin(), usedNames.end(), potentialName) == usedNames.end()) {
			playerName = potentialName;
			usedNames.push_back(playerName);
			return;
		}
    }

	throw std::runtime_error("No unique names left to assign!");
}

void DistributeSkillPoints(int SkillPointBank, int strengthLimit, int weightLimit, int techniqueLimit, int enduranceLimit, int speedLimit) {
    // Skill values and their respective limits
    int strength = 0, weight = 0, technique = 0, endurance = 0, speed = 0;
    std::vector<int> skillLimits = {strengthLimit, weightLimit, techniqueLimit, enduranceLimit, speedLimit};
    std::vector<int> skillPoints = {0, 0, 0, 0, 0};

    std::random_device rd;            // Random number generator
    std::mt19937 rng(rd());
    std::uniform_int_distribution<int> dist(0, 4); // Random number between 0 and 4

    for (int x = 0; x < SkillPointBank; x++) {
        while (true) { // Keep rolling until a valid skill is found
            int RandomSkill = dist(rng); // Generate a random skill index
            if (skillPoints[RandomSkill] < skillLimits[RandomSkill]) {
                skillPoints[RandomSkill]++;
                break;
            }
        }
    }

    // Assign the values to individual skills for clarity
    strength = skillPoints[0];
    weight = skillPoints[1];
    technique = skillPoints[2];
    endurance = skillPoints[3];
    speed = skillPoints[4];

    // Log the results
    Form2->MemoLog->Lines->Add("Skill distribution:");
    Form2->MemoLog->Lines->Add("Strength: " + IntToStr(strength));
    Form2->MemoLog->Lines->Add("Weight: " + IntToStr(weight));
    Form2->MemoLog->Lines->Add("Technique: " + IntToStr(technique));
    Form2->MemoLog->Lines->Add("Endurance: " + IntToStr(endurance));
    Form2->MemoLog->Lines->Add("Speed: " + IntToStr(speed));
}

// Function to assign a random unique Rikishi name and initialize the player's stats
void getrikishi(std::string& rikishiName, int& MinBid, int& CurrentBid,
                int& strength, int& strengthlimit, int& weight, int& weightlimit,
                int& technique, int& techniquelimit, int& endurance,
                int& endurancelimit, int& speed, int& speedlimit, int& spirit,
                int& age, String& rank, std::vector<std::string>& usedNames,
                int skillDiceNo) {

	// Get a unique random name
    GetRandomName(rikishiName, usedNames);

	// Get min bid
    MinBid = std::rand() % skillDiceNo + 1;
	Form2->MemoLog->Lines->Add("The MinBid is " + IntToStr(MinBid) + "!");

	// Randomly select age
	if (MinBid == 3) {
        age = 22 + (std::rand() % 8); // 22 to 29
	}
	else if (MinBid == 2) {
        age = 24 + (std::rand() % 6); // 24 to 29
	}
	else if (MinBid == 1) {
		age = 26 + (std::rand() % 4); // 26 to 29
	}
	else {
		age = 21 + (std::rand() % 9); // 21 to 29
	}
    Form2->MemoLog->Lines->Add("The Age is " + IntToStr(age) + "!");

	// Subtract min bid based on age
    CurrentBid = MinBid - std::floor((29 - age) / 2);
	Form2->MemoLog->Lines->Add("The CurrentBid is " + IntToStr(CurrentBid) + "!");

	// Generate 3 unique random indices for limits
    std::vector<int> allLimits = {0, 1, 2, 3, 4}; // Represents each limit
	std::random_device rd;            // Obtain a random number from hardware
	std::mt19937 rng(rd());           // Seed the generator (Mersenne Twister)
	std::shuffle(allLimits.begin(), allLimits.end(), rng);

	// Initialize all limits to default
    strengthlimit = 4;
    weightlimit = 4;
    techniquelimit = 4;
    endurancelimit = 4;
    speedlimit = 4;

	// Assign random limits (1, 2, 3) to three attributes based on shuffled order
    for (int i = 0; i < 3; ++i) {
		switch (allLimits[i]) {
			case 0:
				strengthlimit = i + 1;
				break;
			case 1:
				weightlimit = i + 1;
				break;
			case 2:
				techniquelimit = i + 1;
				break;
			case 3:
				endurancelimit = i + 1;
				break;
			case 4:
				speedlimit = i + 1;
				break;
			default:
				Form2->MemoLog->Lines->Add("Error: Invalid limit index!");
				break;
		}
    }

	// Log the assigned limits
	Form2->MemoLog->Lines->Add("The strengthlimit is " + IntToStr(strengthlimit) + "!");
	Form2->MemoLog->Lines->Add("The weightlimit is " + IntToStr(weightlimit) + "!");
	Form2->MemoLog->Lines->Add("The techniquelimit is " + IntToStr(techniquelimit) + "!");
	Form2->MemoLog->Lines->Add("The endurancelimit is " + IntToStr(endurancelimit) + "!");
	Form2->MemoLog->Lines->Add("The speedlimit is " + IntToStr(speedlimit) + "!");

	// flip a coin to see if the Rikishi is exceptional
	int coinflip = std::rand() % 2;
	int SkillPointBank = 4;
	if (coinflip == 1) {
		Form2->MemoLog->Lines->Add("You got lucky!");
	}
	else {
        Form2->MemoLog->Lines->Add("You not lucky!");
    }

	// Randomly add skills based on the remaining Bid
	SkillPointBank = SkillPointBank + CurrentBid*2 + coinflip;
	Form2->MemoLog->Lines->Add("The SkillPointBank is " + IntToStr(SkillPointBank) + "!");
	DistributeSkillPoints(SkillPointBank, strengthlimit, weightlimit,
						  techniquelimit, endurancelimit, speedlimit);

	// Assign spirit
	spirit = 2;

	// Assign a default rank from the Ranks array
	rank = Ranks[16-MinBid];
	Form2->MemoLog->Lines->Add("The Rank is " + rank + "!");
}

// Function to initialize values for both sets of variables
void InitializeValues() {

	usedNames.clear(); // Clear previously used names at initialization

	getrikishi(player1Name, MinBid1, CurrentBid1, strength_1, strengthlimit1, weight_1, weightlimit1, technique_1, techniquelimit1, endurance_1, endurancelimit1,
			   speed_1, speedlimit1, Spirit1, Age1, Rank1, usedNames, SkillDiceNo);

	// Initialize Player 1 variables
	strength_1 = std::rand() % SkillDiceNo;
	weight_1 = std::rand() % SkillDiceNo;
	technique_1 = std::rand() % SkillDiceNo;
	endurance_1 = std::rand() % SkillDiceNo;
	speed_1 = std::rand() % SkillDiceNo;
	Spirit1 = std::rand() % SkillDiceNo;
	Age1 = 21 + (std::rand() % (30 - 21));
	Rank1 = Ranks[13];
	GetRandomName(player1Name, usedNames); // Assign random unique name to player1Name

	// Initialize Player 2 variables
	strength_2 = std::rand() % SkillDiceNo;
	weight_2 = std::rand() % SkillDiceNo;
	technique_2 = std::rand() % SkillDiceNo;
	endurance_2 = std::rand() % SkillDiceNo;
	speed_2 = std::rand() % SkillDiceNo;
	Spirit2 = std::rand() % SkillDiceNo;
	Age2 = 21 + (std::rand() % (30 - 21));
	Rank2 = Ranks[11];
	GetRandomName(player2Name, usedNames); // Assign random unique name to player2Name
}

// Function to update the GUI with the current values of the variables
void UpdateGUI() {
	// Update Player 1 GUI
	Form2->ButtonStrength_1->Text = "Strength: " + IntToStr(strength_1);
	Form2->ButtonWeight_1->Text = "Weight: " + IntToStr(weight_1);
	Form2->ButtonTechnique_1->Text = "Technique: " + IntToStr(technique_1);
	Form2->ButtonEndurance_1->Text = "Endurance: " + IntToStr(endurance_1);
	Form2->ButtonSpeed_1->Text = "Speed: " + IntToStr(speed_1);
	Form2->EditAge1->Text = "Age: " + IntToStr(Age1);
	Form2->EditSpirit1->Text = "Spirit: " + IntToStr(Spirit1);
	Form2->EditRank1->Text = "Rank: " + UnicodeString(Rank1.c_str());
	Form2->EditName1->Text = "Rikishi: " + UnicodeString(player1Name.c_str());
	Form2->EditOwner1->Text = "Oyakata: " + UnicodeString(player1Owner.c_str());

	// Update Player 2 GUI
	Form2->EditStrength_2->Text = "Strength: " + IntToStr(strength_2);
	Form2->EditWeight_2->Text = "Weight: " + IntToStr(weight_2);
	Form2->EditTechnique_2->Text = "Technique: " + IntToStr(technique_2);
	Form2->EditEndurance_2->Text = "Endurance: " + IntToStr(endurance_2);
	Form2->EditSpeed_2->Text = "Speed: " + IntToStr(speed_2);
	Form2->EditAge2->Text = "Age: " + IntToStr(Age2);
	Form2->EditSpirit2->Text = "Spirit: " + IntToStr(Spirit2);
	Form2->EditRank2->Text = "Rank: " + UnicodeString(Rank2.c_str());
	Form2->EditName2->Text = "Rikishi: " + UnicodeString(player2Name.c_str());
	Form2->EditOwner2->Text = "Oyakata: " + UnicodeString(player2Owner.c_str());
}

void GetBoutTactic() {
    if (player1Tactic == player2Tactic) {
		boutTactic = player1Tactic; // Both players chose the same skill
//		UpdateLogMemo("The bout tactic is " + player1Tactic + "!");
		Form2->MemoLog->Lines->Add("The bout tactic is " + player1Tactic + "!");
	}
	// Check if either player's tactic is "Strength"
	else if ((player1Tactic == "Strength" && (player2Tactic == "Weight" || player2Tactic == "Technique")) ||
			 (player2Tactic == "Strength" && (player1Tactic == "Weight" || player1Tactic == "Technique"))) {
		boutTactic = "Strength";
		Form2->MemoLog->Lines->Add("The bout tactic is Strength!");
//		UpdateLogMemo("The bout tactic is Strength!");
	}
	// Check if either player's tactic is "Speed"
	else if ((player1Tactic == "Speed" && (player2Tactic == "Strength" || player2Tactic == "Endurance")) ||
			 (player2Tactic == "Speed" && (player1Tactic == "Strength" || player1Tactic == "Endurance"))) {
		boutTactic = "Speed";
		Form2->MemoLog->Lines->Add("The bout tactic is Speed!");
	}
	// Check if either player's tactic is "Technique"
	else if ((player1Tactic == "Technique" && (player2Tactic == "Weight" || player2Tactic == "Speed")) ||
			 (player2Tactic == "Technique" && (player1Tactic == "Weight" || player1Tactic == "Speed"))) {
		boutTactic = "Technique";
		Form2->MemoLog->Lines->Add("The bout tactic is Technique!");
	}
	// Check if either player's tactic is "Endurance"
	else if ((player1Tactic == "Endurance" && (player2Tactic == "Strength" || player2Tactic == "Technique")) ||
			 (player2Tactic == "Endurance" && (player1Tactic == "Strength" || player1Tactic == "Technique"))) {
		boutTactic = "Endurance";
		Form2->MemoLog->Lines->Add("The bout tactic is Endurance!");
	}
	// Check if either player's tactic is "Weight"
	else if ((player1Tactic == "Weight" && (player2Tactic == "Endurance" || player2Tactic == "Speed")) ||
			 (player2Tactic == "Weight" && (player1Tactic == "Endurance" || player1Tactic == "Speed"))) {
		boutTactic = "Weight";
		Form2->MemoLog->Lines->Add("The bout tactic is Weight!");
	}
	else {
		boutTactic = "Unknown"; // Fallback if no condition is met
		Form2->MemoLog->Lines->Add("Bout Tactic Error!");
	}
}

void GetNewSkill() {
    if (boutTactic == "Strength") {
        player1Skill = strength_1;
        player2Skill = strength_2;
    } else if (boutTactic == "Weight") {
        player1Skill = weight_1;
        player2Skill = weight_2;
    } else if (boutTactic == "Technique") {
        player1Skill = technique_1;
        player2Skill = technique_2;
    } else if (boutTactic == "Endurance") {
        player1Skill = endurance_1;
        player2Skill = endurance_2;
    } else if (boutTactic == "Speed") {
		player1Skill = speed_1;
		player2Skill = speed_2;
	} else {
		// Default behavior if boutTactic does not match any skill
		player1Skill = 0;
		player2Skill = 0;
		Form2->MemoLog->Lines->Add("Unknown bout tactic. Defaulting skills to 0.");
	}}

 // Constructor for the form
__fastcall TForm2::TForm2(TComponent* Owner)
	: TForm(Owner)
{
//	CreateConsole(); // Create and print to console
//	UpdateLogMemo("Welcome to Banzuke Shoushin!");
	MemoLog->Lines->Add("Welcome to Banzuke Shoushin!");
	std::srand(std::time(0));
	InitializeValues();
	UpdateGUI();
//	try {
//        CheckNamesFile(); // Ensure names.txt exists before proceeding
//        // Your existing fight logic here...
//    } catch (const std::runtime_error& e) {
//        // Handle the error, maybe exit or prompt the user to fix it
//        MemoLog->Lines->Add("Error: " + UnicodeString(e.what()));
//	}
}

int RandomSkillForPlayer2() {
	int randomSkillIndex = std::rand() % SkillDiceNo;
	switch (randomSkillIndex) {
		case 0:
			player2Tactic = "Strength";
			return strength_2;
		case 1:
			player2Tactic = "Weight";
			return weight_2;
		case 2:
			player2Tactic = "Technique";
			return technique_2;
		case 3:
			player2Tactic = "Endurance";
			return endurance_2;
		case 4:
			player2Tactic = "Speed";
			return speed_2;
		default:
			player2Tactic = "Unknown";
			Form2->MemoLog->Lines->Add("Error Returning 0.");
			return 0;
	}
}
void __fastcall TForm2::ButtonResetClickClick(TObject *Sender)
{
	InitializeValues();
	UpdateGUI();
	LabelResult->Text = "";
//	player1Skill = 0;
//	player2Skill = 0;
    MemoLog->Lines->Clear();
}

void __fastcall TForm2::ButtonStrength_1Click(TObject *Sender)
{
	player1Skill = strength_1;
	player2Skill = RandomSkillForPlayer2();
	player1Tactic = "Strength";
}

void __fastcall TForm2::ButtonSpeed_1Click(TObject *Sender)
{
	player1Skill = speed_1;
	player2Skill = RandomSkillForPlayer2();
	player1Tactic = "Speed";
}

void __fastcall TForm2::ButtonWeight_1Click(TObject *Sender)
{
	player1Skill = weight_1;
	player2Skill = RandomSkillForPlayer2();
	player1Tactic = "Weight";
}

void __fastcall TForm2::ButtonTechnique_1Click(TObject *Sender)
{
	player1Skill = technique_1;
	player2Skill = RandomSkillForPlayer2();
	player1Tactic = "Technique";
}

void __fastcall TForm2::ButtonEndurance_1Click(TObject *Sender)
{
	player1Skill = endurance_1;
	player2Skill = RandomSkillForPlayer2();
	player1Tactic = "Endurance";

}

void __fastcall TForm2::fight_buttonClick(TObject *Sender)
{

	// Reset player skills before each fight
	player1Skill = 0;
	player2Skill = 0;
	boutTactic = "Unknown";
	Luck1 = std::rand() % 7;
	Luck2 = std::rand() % 7;

	MemoLog->Lines->Add("Rikishi 1 chose: " + player1Tactic);
	MemoLog->Lines->Add("Rikishi 2 chose: " + player2Tactic);

	GetBoutTactic();

	GetNewSkill();

	MemoLog->Lines->Add("Rikishi 1 has a skill modifier = " + \
	 IntToStr(player1Skill));
	MemoLog->Lines->Add("Rikishi 2 has a skill modifier = " + \
	 IntToStr(player2Skill));

	Luck1 = std::rand() % 7;
	Luck2 = std::rand() % 7;
	player1Skill = player1Skill+Luck1;
	player2Skill = player2Skill+Luck2;
	MemoLog->Lines->Add("Rikishi 1 rolled a " + IntToStr(Luck1));
	MemoLog->Lines->Add("Rikishi 2 rolled a " + IntToStr(Luck2));

	if (Spirit1 == 4) {
		player1Skill = player1Skill+Luck1;
		MemoLog->Lines->Add("Rikishi 1 has high spirits!");
	}
	if (Spirit2 == 4) {
		player2Skill = player2Skill+Luck2;
		MemoLog->Lines->Add("Rikishi 2 has high spirits!");
	}
	MemoLog->Lines->Add("They Fight!");
	MemoLog->Lines->Add("...");
	if (player1Skill > player2Skill) {
		MemoLog->Lines->Add("Rikishi 1 wins!");
		LabelResult->Text = "Congratulations! You won!";
	} else if (player1Skill < player2Skill) {
		MemoLog->Lines->Add("Rikishi 2 wins!");
		LabelResult->Text = "You lose this round, try again!";
	} else {
		MemoLog->Lines->Add("It was a draw!");
		LabelResult->Text = "Draw! Try another round!";
	}
}
//---------------------------------------------------------------------------

